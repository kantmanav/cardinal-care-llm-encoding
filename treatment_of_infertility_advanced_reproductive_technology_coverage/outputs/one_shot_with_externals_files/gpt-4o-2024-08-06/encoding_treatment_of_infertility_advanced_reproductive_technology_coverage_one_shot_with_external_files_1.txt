```prolog
:- import("../../rules.hrf").
:- import("../../../../Cardinal Care Core/Precertification Required/rules.hrf").
:- import("../../Non-basic Infertility Services/rules.hrf").

covered(C) :-
    claim.service_type(C, Type) &
    (Type = ivf_for_fertility_preservation ; Type = cryopreservation_for_fertility_preservation) &
    claim.location_service_received(C, Location) &
    in_network_location(Location) &
    (Type = ivf_for_fertility_preservation -> covered_ivf_fertility_preservation(C) ; covered_cryopreservation_fertility_preservation(C)).

in_network_location(Location) :-
    member(Location, [stanford_health_care, menlo_medical_clinic, sutter_health_palo_alto_medical_foundation, tier_two_in_network]).

covered_ivf_fertility_preservation(C) :-
    claim.patient_is_believed_to_be_fertile(C, yes) &
    claim.planned_service(C, Service) &
    member(Service, [chemotherapy, pelvic_radiotherapy, gonadotoxic_therapy, orchiectomy, oophorectomy, hysterectomy, other_treatment_demonstrated_to_result_in_infertility]) &
    claim.will_be_retrieving_eggs_for_use(C, yes) &
    (claim.patient_has_premature_ovarian_failure(C, yes) -> patient_premature_ovarian_failure_coverage(C) ; normal_coverage_ivf(C)).

normal_coverage_ivf(C) :-
    meets_cpb_egg_sperm_contact_trial_reqs(C) &
    meets_ovarian_response_for_ivf(C).

patient_premature_ovarian_failure_coverage(C) :-
    claim.date_service_received(C, Date) &
    check_age_in_coverage(Date, C).

check_age_in_coverage(Date, C) :-
    patient_age_at_time_of_service(C, Age) &
    less(Age, 45).

meets_ovarian_response_for_ivf(C) :-
    claim.day_3_fsh_tests(C, Tests) &
    most_recent_day_3_fsh_test(C, fsh_test(Level, _, _)) &
    less(Level, 19).

covered_cryopreservation_fertility_preservation(C) :-
    claim.patient_is_believed_to_be_fertile(C, yes) &
    claim.planned_service(C, Service) &
    member(Service, [chemotherapy, pelvic_radiotherapy, gonadotoxic_therapy, orchiectomy, oophorectomy, hysterectomy, other_treatment_demonstrated_to_result_in_infertility]) &
    claim.will_be_retrieving_eggs_for_use(C, yes).

patient_age_at_time_of_service(C, Age) :-
    claim.date_service_received(C, Date) &
    claim.patient_dob(C, DOB) &
    get_timestamp_from_date(Date, CurrentTS) &
    get_timestamp_from_date(DOB, BirthTS) &
    Age is (CurrentTS - BirthTS) // 31557600.
```

