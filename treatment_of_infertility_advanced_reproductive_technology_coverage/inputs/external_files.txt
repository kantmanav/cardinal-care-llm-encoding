# Files to Import
- ../../rules.hrf
- ../../../../Cardinal Care Core/Precertification Required/rules.hrf
- ../../Non-basic Infertility Services/rules.hrf

# Contents of Imported Files

## File: ../../rules.hrf

-----

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Eligible for service - additional eligibility requirements
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% In respective rule files


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Medical necessity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% In respective rule files



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Precertified if necessary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% In respective rule files

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Limitations from Schedule of Benefits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% In respective rule files


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Helper functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% get_timestamp_from_date is used either directly or indirectly in all treatment of infertility coverages
get_timestamp_from_date(DATE,STAMP) :-
  evaluate(parsedate(DATE),[Y,M,D]) &
  evaluate(maketimestamp(Y,M,D,0,0,0),STAMP)

-----

## File: ../../../../Cardinal Care Core/Precertification Required/rules.hrf:

-----

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Precertified if necessary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
precertified_if_necessary(C) :-
    claim.service_type(C, ServiceType) &
    requires_precertification(ServiceType) & 
    claim.precertification_received(C, yes)

-----

## File: ../../Non-basic Infertility Services/rules.hrf:

-----

%%% Egg-sperm contact requirements %%% 

% For ages under 35
meets_cpb_egg_sperm_contact_trial_reqs(C) :-
    patient_age_at_time_of_service(C, Age) &
    less(Age, 35) &
    meets_cpb_egg_sperm_contact_trial_reqs_under_35(C)

meets_cpb_egg_sperm_contact_trial_reqs_under_35(C) :-
    claim.num_months_frequent_unprotected_heterosexual_intercourse(C, N) &
    leq(12, N)

meets_cpb_egg_sperm_contact_trial_reqs_under_35(C) :-
    claim.num_cycles_timed_intrauterine_intracervical_inseminations(C, N) &
    leq(4, N)

% For ages 35 and over
meets_cpb_egg_sperm_contact_trial_reqs(C) :-
    patient_age_at_time_of_service(C, Age) &
    leq(35, Age) &
    meets_cpb_egg_sperm_contact_trial_reqs_35_and_over(C)

meets_cpb_egg_sperm_contact_trial_reqs_35_and_over(C) :-
    claim.num_months_frequent_unprotected_heterosexual_intercourse(C, N) &
    leq(6, N)

meets_cpb_egg_sperm_contact_trial_reqs_35_and_over(C) :-
    claim.num_cycles_timed_intrauterine_intracervical_inseminations(C, N) &
    leq(3, N)



%%% FSH Test handling %%%
% If multiple tests have the same date and time, then we can't decide which was most recent and this is not satisfied.
most_recent_day_3_fsh_test(C, fsh_test(Level, Date, Time)) :-
    claim.day_3_fsh_tests(C, Tests) &
    choose_1_with_index_from_list(Tests, fsh_test(Level, Date, Time), I1) &
    countofall(I2, choose_1_with_index_from_list(Tests, fsh_test(_, Date2, Time2), I2) & distinct(I1, I2) & leq_datetime(Date, Time, Date2, Time2), 0)

% Gets day 3 fsh tests that have been performed since the patient became 40 years old
day_3_fsh_tests_since_age_40_in_claim(C, Tests) :-
    claim.patient_dob(C, DOB) &
    evaluate(parsedate(DOB), [Y, M, D]) &
    evaluate(maketimestamp(plus(Y, 40), M, D, 0, 0, 0), FortiethBirthdayTS) &
    claim.day_3_fsh_tests(C, AllTests) &
    get_all_tests_since_timestamp(FortiethBirthdayTS, AllTests, Tests)

get_all_tests_since_timestamp(_, [], [])
get_all_tests_since_timestamp(TS, fsh_test(Level, Date, Time)!T, fsh_test(Level, Date, Time)!Rest) :-
    datetimetotimestamp(Date, Time, TestTS) &
    leq(TS, TestTS) &
    get_all_tests_since_timestamp(TS, T, Rest)

get_all_tests_since_timestamp(TS, fsh_test(Level, Date, Time)!T, Rest) :-
    datetimetotimestamp(Date, Time, TestTS) &
    ~leq(TS, TestTS) &
    get_all_tests_since_timestamp(TS, T, Rest)


exists_test_with_level_at_least_19(Tests) :-
    member(fsh_test(Level, _, _), Tests) &
    leq(19, Level)

leq_datetime(Date1, Time1, Date2, Time2) :-
    datetimetotimestamp(Date1, Time1, TS1) &
    datetimetotimestamp(Date2, Time2, TS2) & 
    leq(TS1, TS2)

-----