% Medical necessity rules removed

% Precertification rules removed

% Beyond limits rules removed
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Helper functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% get_timestamp_from_date is used either directly or indirectly in all treatment of infertility coverages
get_timestamp_from_date(DATE,STAMP) :-
  evaluate(parsedate(DATE),[Y,M,D]) &
  evaluate(maketimestamp(Y,M,D,0,0,0),STAMP)

%%% Egg-sperm contact requirements %%% 
% For ages under 35
meets_cpb_egg_sperm_contact_trial_reqs(C) :-
    patient_age_at_time_of_service(C, Age) &
    less(Age, 35) &
    meets_cpb_egg_sperm_contact_trial_reqs_under_35(C)

meets_cpb_egg_sperm_contact_trial_reqs_under_35(C) :-
    claim.num_months_frequent_unprotected_heterosexual_intercourse(C, N) &
    leq(12, N)

meets_cpb_egg_sperm_contact_trial_reqs_under_35(C) :-
    claim.num_cycles_timed_intrauterine_intracervical_inseminations(C, N) &
    leq(4, N)

% For ages 35 and over
meets_cpb_egg_sperm_contact_trial_reqs(C) :-
    patient_age_at_time_of_service(C, Age) &
    leq(35, Age) &
    meets_cpb_egg_sperm_contact_trial_reqs_35_and_over(C)

meets_cpb_egg_sperm_contact_trial_reqs_35_and_over(C) :-
    claim.num_months_frequent_unprotected_heterosexual_intercourse(C, N) &
    leq(6, N)

meets_cpb_egg_sperm_contact_trial_reqs_35_and_over(C) :-
    claim.num_cycles_timed_intrauterine_intracervical_inseminations(C, N) &
    leq(3, N)

%%% FSH Test handling %%%
% If multiple tests have the same date and time, then we can't decide which was most recent and this is not satisfied.
most_recent_day_3_fsh_test(C, fsh_test(Level, Date, Time)) :-
    claim.day_3_fsh_tests(C, Tests) &
    choose_1_with_index_from_list(Tests, fsh_test(Level, Date, Time), I1) &
    countofall(I2, choose_1_with_index_from_list(Tests, fsh_test(_, Date2, Time2), I2) & distinct(I1, I2) & leq_datetime(Date, Time, Date2, Time2), 0)

% Gets day 3 fsh tests that have been performed since the patient became 40 years old
day_3_fsh_tests_since_age_40_in_claim(C, Tests) :-
    claim.patient_dob(C, DOB) &
    evaluate(parsedate(DOB), [Y, M, D]) &
    evaluate(maketimestamp(plus(Y, 40), M, D, 0, 0, 0), FortiethBirthdayTS) &
    claim.day_3_fsh_tests(C, AllTests) &
    get_all_tests_since_timestamp(FortiethBirthdayTS, AllTests, Tests)

get_all_tests_since_timestamp(_, [], [])
get_all_tests_since_timestamp(TS, fsh_test(Level, Date, Time)!T, fsh_test(Level, Date, Time)!Rest) :-
    datetimetotimestamp(Date, Time, TestTS) &
    leq(TS, TestTS) &
    get_all_tests_since_timestamp(TS, T, Rest)

get_all_tests_since_timestamp(TS, fsh_test(Level, Date, Time)!T, Rest) :-
    datetimetotimestamp(Date, Time, TestTS) &
    ~leq(TS, TestTS) &
    get_all_tests_since_timestamp(TS, T, Rest)


exists_test_with_level_at_least_19(Tests) :-
    member(fsh_test(Level, _, _), Tests) &
    leq(19, Level)

leq_datetime(Date1, Time1, Date2, Time2) :-
    datetimetotimestamp(Date1, Time1, TS1) &
    datetimetotimestamp(Date2, Time2, TS2) & 
    leq(TS1, TS2)


% Core covered rule removed

% Valid provider rule removed

% No additional eligibility requirements

% Medical necessity rule removed




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Helper functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

patient_age_at_time_of_service(Claim, Age) :-
    claim.patient_dob(Claim, PatientDOB) &
    claim.date_service_received(Claim, ServiceDate) &
    patient_age_on_date(PatientDOB, ServiceDate, Age)

patient_age_on_date(PatientDOB, Date, Age) :-
    evaluate(parsedate(Date),[Year,Month,Day]) &
    evaluate(parsedate(PatientDOB),[PatientDOBYear,PatientDOBMonth,PatientDOBDay]) &
    evaluate(minus(Year,PatientDOBYear), YearDiff) &
    not_yet_birthday_delta(Month,Day, PatientDOBMonth, PatientDOBDay, Delta) &
    evaluate(plus(YearDiff, Delta), Age)

age_at_time_of_service(Claim, Person, Age) :-
    claim.date_service_received(Claim, ServiceDate) &
    age_on_date(Person, ServiceDate, Age)

age_on_date(Person, Date, Age) :-
    person.dob(Person, DOB) &
    evaluate(parsedate(Date),[Year,Month,Day]) &
    evaluate(parsedate(DOB),[DOBYear,DOBMonth,DOBDay]) &
    evaluate(minus(Year,DOBYear), YearDiff) &
    not_yet_birthday_delta(Month,Day, DOBMonth, DOBDay, Delta) &
    evaluate(plus(YearDiff, Delta), Age)


not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, -1) :-
    less(Month, DOBMonth)

not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, -1) :-
    same(Month, DOBMonth) &
    less(Day, DOBDay)

not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, 0) :-
    less(DOBMonth, Month)

not_yet_birthday_delta(Month, Day, FOBMonth, DOBDay, 0) :-
    same(Month, DOBMonth) &
    leq(DOBDay, Day)


date_between_dates_incl(Date, BeginDateRange, EndDateRange) :-
    symleq(BeginDateRange, Date) &
    symleq(Date, EndDateRange)

leq_n_months_diff(EarlierDate, LaterDate, N) :-
    n_months_diff(EarlierDate, LaterDate, Diff) &
    less(Diff, N)

leq_n_months_diff(EarlierDate, LaterDate, N) :-
    n_months_diff(EarlierDate, LaterDate, N) &
    evaluate(parsedate(EarlierDate),[_,_,SameDay]) & 
    evaluate(parsedate(LaterDate),[_,_,SameDay])

n_months_diff(EarlierDate, LaterDate, N) :-
    evaluate(parsedate(EarlierDate),[EY,EM,ED]) & 
    evaluate(parsedate(LaterDate),[LY,LM,LD]) &
    evaluate(times(minus(LY, EY), 12), MonthsFromYear) & 
    not_yet_day_of_month_delta(ED, LD, Delta) &
    evaluate(plus(MonthsFromYear, minus(LM, EM), Delta), N)

not_yet_day_of_month_delta(D1, D2, 0) :-
    leq(D1, D2)

not_yet_day_of_month_delta(D1, D2, -1) :-
    less(D2, D1)

%%%%% Relations to faciliate choosing elements from lists that may have repeats

% Generates all pairs (unordered) of elements from a list, counting identical elements at different positions as distinct
choose_2_with_indices_from_list_no_repeats(L, E1, I1, E2, I2) :-
    choose_2_with_indices_from_sublist_no_repeats(0, L, E1, I1, E2, I2)


% Case 1: The first element is the head
choose_2_with_indices_from_sublist_no_repeats(NumBefore, H!T, H, NumBefore, E2, I2) :-
    evaluate(plus(NumBefore, 1), NewNumBefore) &
    choose_1_with_index_from_sublist(NewNumBefore, T, E2, I2)

% Case 2: The first element is in the tail
choose_2_with_indices_from_sublist_no_repeats(NumBefore, H!T, E1, I1, E2, I2) :-
    evaluate(plus(NumBefore, 1), NewNumBefore) &
    choose_2_with_indices_from_sublist_no_repeats(NewNumBefore, T, E1, I1, E2, I2)


% Entry point
choose_1_with_index_from_list(L, E, I) :-
    choose_1_with_index_from_sublist(0, L, E, I)

% Case 1: The element is the head
choose_1_with_index_from_sublist(NumBefore, H!T, H, NumBefore)

% Case 2: The element is in the tail
choose_1_with_index_from_sublist(NumBefore, H!T, E, I) :-
    evaluate(plus(NumBefore, 1), NewNumBefore) &
    choose_1_with_index_from_sublist(NewNumBefore, T, E, I)